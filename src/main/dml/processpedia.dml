package pt.ist.processpedia.domain;

enum pt.ist.processpedia.domain.ProcessState as ProcessState;
enum pt.ist.processpedia.domain.RequestState as RequestState;
enum pt.ist.processpedia.domain.ResponseState as ResponseState;

valueType pt.ist.processpedia.domain.Id as Id {
  externalizeWith {
    String toString();
  }
}

class Processpedia {
  Id nextUserId;
  Id nextProcessId;
  Id nextRequestId;
  Id nextCommitmentId;
  Id nextResponseId;
  Id nextTagId;
  Id nextCommentId;
  Id nextQueueId;
}

class DomainObject {
  String id;
}

class Process extends DomainObject {
  ProcessState state;
  DateTime creationTimestamp;
  DateTime closeTimestamp;
}

class Request extends DomainObject {
  RequestState state;
  DateTime creationTimestamp;
  DateTime completionTimestamp;
}

class Commitment extends DomainObject {
  DateTime commitmentTimestamp;
}

class Response extends DomainObject {
  ResponseState state;
}

class User extends DomainObject {
  String name;
  String email;
  String passwordHash;
  String avatarUrl;
}

class Queue extends DomainObject {
  String name;
}

class Comment extends DomainObject {
  DateTime creationTimestamp;
  String commentText;
}

relation ProcesspediaHasUsers {
  Processpedia playsRole processpedia;
  User playsRole user {
    multiplicity *;
  }
}

relation ProcesspediaHasProcesses {
  Processpedia playsRole processpedia;
  Process playsRole process {
    multiplicity *;
  }
}

relation UsersCreateProcesses {
  User playsRole creator;
  Process playsRole createdProcess {
    multiplicity *;
  }
}

relation UsersOwnProcesses {
  User playsRole owner {
    multiplicity *;
  }
  Process playsRole ownedProcess {
    multiplicity *;
  }
}

relation UsersInitiateRequests {
  User playsRole initiator;
  Request playsRole initiatedRequest {
    multiplicity *;
  }
}

relation UsersExecuteRequests {
  User playsRole executor;
  Request playsRole executingRequest {
    multiplicity *;
  }
}

relation RequestsOccurInTheContextOfAProcess {
  Process playsRole process;
  Request playsRole request {
    multiplicity *;
  }
}

relation UsersMakeCommitments {
  User playsRole user;
  Commitment playsRole commitment {
    multiplicity *;
  }
}

relation CommitmentsAreMadeToARequest {
  Request playsRole request;
  Commitment playsRole commitment {
    multiplicity *;
  }
}

relation CommitmentHasResponses {
  Commitment playsRole commitment;
  Response playsRole response {
    multiplicity *;
  }
}

relation ResponsesMayBeImproved {
  Response playsRole previousResponse;
  Response playsRole improvedResponse;
}

relation UsersCreateResponses {
  Response playsRole response {
    multiplicity *;
  }
  User playsRole creator;
}

relation RequestsMayContainOtherRequests {
  Request playsRole parentRequest;
  Request playsRole childRequest {
    multiplicity *;
  }
}

relation ProcesspediaContainsQueues {
  Processpedia playsRole processpedia;
  Queue playsRole queue {
    multiplicity *;
  }
}

relation RequestsArePublishedOnQueues {
  Request playsRole publishedRequest {
    multiplicity *;
  }
  Queue playsRole publishedQueue {
    multiplicity *;
  }
}

relation QueuesMayContainOtherQueues {
  Queue playsRole parentQueue {
    multiplicity *;
  }
  Queue playsRole childQueue {
    multiplicity *;
  }
}

relation UsersHaveAPrivateQueue {
  User playsRole privateOwner;
  Queue playsRole privateQueue;
}

relation RequestMayHaveADescription {
  Request playsRole request;
  Comment playsRole descriptionComment;
}

relation UserAuthorComments {
  User playsRole author;
  Comment playsRole comment {
    multiplicity *;
  }
}

class Tag extends DomainObject {
  String keyword;
}

relation ProcessHasATitle {
  Process playsRole process;
  Tag playsRole titleTag;
}

relation RequestHasSubject {
  Request playsRole request;
  Tag playsRole subjectTag;
}

relation ProcessHasADescription {
  Process playsRole process;
  Comment playsRole descriptionComment;
}

relation CommentMayBeReplied {
  Comment playsRole comment;
  Comment playsRole reply {
    multiplicity *;
  }
}