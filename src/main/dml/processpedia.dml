package pt.ist.processpedia.domain;

enum pt.ist.processpedia.domain.RequestState as RequestState;

valueType pt.ist.processpedia.domain.Id as Id {
  externalizeWith {
    String toString();
  }
}

class Processpedia {
  Id nextUserId;
  Id nextRequestId;
  Id nextCommitmentId;
  Id nextResponseId;
  Id nextTagId;
  Id nextCommentId;
  Id nextQueueId;
}

class DomainObject {
  String id;
}

class Request extends DomainObject {
  RequestState state;
  DateTime creationTimestamp;
  DateTime completionTimestamp;
}

class CallbackRequest extends Request;

class ForwardRequest extends Request;

class ProcessRequest extends Request;


class RequestClaimingPolicy;

relation RequestHaveClaimingPolicies {
  Request playsRole request;
  RequestClaimingPolicy playsRole claimingPolicy {
    multiplicity *;
  }
}

class RequestDeadlineClaimingPolicy extends RequestClaimingPolicy {
  DateTime deadlineTimestamp;
}

class RequestMaxCommitmentsClaimingPolicy extends RequestClaimingPolicy {
  Integer numMaxCommitments;
}

class User extends DomainObject {
  String name;
  String email;
  String passwordHash;
  String avatarUrl;
}

class Queue extends DomainObject {
  String name;
}

class Comment extends DomainObject {
  DateTime creationTimestamp;
  String commentText;
}

relation ProcesspediaHasUsers {
  Processpedia playsRole processpedia;
  User playsRole user {
    multiplicity *;
  }
}

relation ProcesspediaHasProcesses {
  Processpedia playsRole processpedia;
  Process playsRole process {
    multiplicity *;
  }
}

relation UsersCreateProcesses {
  User playsRole creator;
  Process playsRole createdProcess {
    multiplicity *;
  }
}

relation UsersOwnProcesses {
  User playsRole owner {
    multiplicity *;
  }
  Process playsRole ownedProcess {
    multiplicity *;
  }
}

relation UsersInitiateRequests {
  User playsRole initiator;
  Request playsRole initiatedRequest {
    multiplicity *;
  }
}

relation UsersExecuteRequests {
  User playsRole executor;
  Request playsRole executingRequest {
    multiplicity *;
  }
}

relation RequestHasCallbackRequests {
  Request playsRole parent;
  CallbackRequest playsRole child {
    multiplicity *;
  }
}

relation RequestHasForwardRequests {
  Request playsRole previous;
  ForwardRequest playsRole next {
    multiplicity *;
  }
}

relation ProcesspediaContainsQueues {
  Processpedia playsRole processpedia;
  Queue playsRole queue {
    multiplicity *;
  }
}

relation RequestsArePublishedOnQueues {
  Request playsRole publishedRequest {
    multiplicity *;
  }
  Queue playsRole publishedQueue {
    multiplicity *;
  }
}

relation QueuesMayContainOtherQueues {
  Queue playsRole parentQueue {
    multiplicity *;
  }
  Queue playsRole childQueue {
    multiplicity *;
  }
}

relation UsersHaveAPrivateQueue {
  User playsRole privateOwner;
  Queue playsRole privateQueue;
}

relation RequestMayHaveADescription {
  Request playsRole request;
  Comment playsRole descriptionComment;
}

relation UserAuthorComments {
  User playsRole author;
  Comment playsRole comment {
    multiplicity *;
  }
}

class Tag extends DomainObject {
  String keyword;
}

relation ProcessHasATitle {
  Process playsRole process;
  Tag playsRole titleTag;
}

relation RequestHasSubject {
  Request playsRole request;
  Tag playsRole subjectTag;
}

relation ProcessHasADescription {
  Process playsRole process;
  Comment playsRole descriptionComment;
}

relation CommentMayBeReplied {
  Comment playsRole comment;
  Comment playsRole reply {
    multiplicity *;
  }
}